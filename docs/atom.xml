<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>The Third Bit</title>
 <link href="https://third-bit.com/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2024-12-12T00:00:00Z</updated>
 <id>https://third-bit.com/</id>
 <author>
   <name>Greg Wilson</name>
   <email>gvwilson@third-bit.com</email>
 </author>
 
 <entry>
   <title>Long Evenings</title>
   <link href="https://third-bit.com/2024/12/10/long-evenings/"/>
   <updated>2024-12-12T00:00:00Z</updated>
   <id>https://third-bit.com/2024/12/10/long-evenings/</id>
   <content type="html">&lt;p&gt;When my brother and I cleaned out my mum&amp;rsquo;s place,
I brought home a slab of fudge that she had made shortly before she died.
She was supposed to come to Ontario that month,
and my guess is that she&amp;rsquo;d planned to bring it for me as a surprise for my birthday.
I just ate the last piece of it,
and it reminded me of how long the evenings sometimes were when I was growing up.
The sun didn&amp;rsquo;t just set, at least not in the summer.
Instead,
the light ebbed little by little,
so gradually that you barely noticed it was getting darker
until something—a store closing or a light coming on in a window—made you realize
that another day had ended.&lt;/p&gt;
&lt;p&gt;Time to make another cup of tea.
If you came in peace, be welcome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Two Roads, and a Third</title>
   <link href="https://third-bit.com/2024/12/08/two-roads-and-a-third/"/>
   <updated>2024-12-08T00:00:00Z</updated>
   <id>https://third-bit.com/2024/12/08/two-roads-and-a-third/</id>
   <content type="html">&lt;p&gt;I caught up with some former colleagues this week,
and one of the questions that came up was,
&amp;ldquo;What would you do if you could have any job you wanted?&amp;rdquo;
I have two answers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A &amp;ldquo;scholar in residence&amp;rdquo; position where I spend my time connecting people,
    mentoring junior colleagues and their projects,
    and generally trying to nudge the world (or at least my corner of our profession)
    in a slightly healthier direction.
    I&amp;rsquo;ve always enjoyed this,
    and while &lt;a href=&#34;https://aosabook.org/&#34;&gt;&lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/a&gt;
    and &lt;a href=&#34;https://neverworkintheory.org/&#34;&gt;It Will Never Work in Theory&lt;/a&gt; didn&amp;rsquo;t become what I hoped they would,
    other ideas might.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A mid-level developer position building software for scientists.
    I say &amp;ldquo;for scientists&amp;rdquo; because it&amp;rsquo;s so rewarding,
    &amp;ldquo;building&amp;rdquo; because I miss being neck-deep in code,
    and &amp;ldquo;mid-level&amp;rdquo; because I&amp;rsquo;d really like to learn
    a few of the things that slid by me over the past twenty years.
    &lt;a href=&#34;https://gleam.run/&#34;&gt;Gleam&lt;/a&gt;?
    &lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;?
    &lt;a href=&#34;https://marimo.io/&#34;&gt;Marimo&lt;/a&gt;?
    &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;?
    It wouldn&amp;rsquo;t really matter as long as I felt every day
    that I understood something I hadn&amp;rsquo;t understood the day before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;rsquo;t think I could combine these two roles
because I always put programming to the side if I&amp;rsquo;m managing and networking.
I also think that it would be easier for me to get the first role than the second:
our industry doesn&amp;rsquo;t know what to do with people who want to take (what is viewed as)
a step down in their career for personal satisfaction.&lt;/p&gt;
&lt;p&gt;The most surprising thing is that &amp;ldquo;teaching full-time&amp;rdquo; isn&amp;rsquo;t on my list
for the first time in two decades.
I built &lt;a href=&#34;https://lessonomicon.github.io/querynomicon/&#34;&gt;a tutorial on SQL&lt;/a&gt; earlier this year,
and started on three others,
but it feels a bit like wandering the halls in my old high school.
I don&amp;rsquo;t know anything well enough to teach it
that I didn&amp;rsquo;t already know ten or fifteen years ago;
while there&amp;rsquo;s a lot to be said for &lt;a href=&#34;https://www.youtube.com/watch?v=7xR50ty5DZ0&#34;&gt;playing the standards&lt;/a&gt;,
my daughter will be moving out in a few months to start college,
and I need to find something to occupy my mind when she does.&lt;/p&gt;
&lt;p&gt;p.s. one other thing I&amp;rsquo;d put on the wish list is an office within cycling distance.
I miss being able to grab a coffee with my co-workers once or twice a week…&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Software Engineering Management Books</title>
   <link href="https://third-bit.com/2024/12/03/software-engineering-management-books/"/>
   <updated>2024-12-03T00:00:00Z</updated>
   <id>https://third-bit.com/2024/12/03/software-engineering-management-books/</id>
   <content type="html">&lt;p&gt;I have read the following recent-ish books about software engineering management
(or in a few cases, read the first couple of chapters and just skimmed the rest).
For the most part they treat the Silicon Valley model as a given,
and if they touch on things like labor rights
or what systemic discrimination reveals about how the system actually works,
they do so only in passing.
If you know of other books that are specifically about managing software development teams,
were published after 2010,
and grapple with &lt;a href=&#34;https://third-bit.com/2018/11/24/afraid-of-change/&#34;&gt;things VCs would rather not talk about&lt;/a&gt;,
I&amp;rsquo;d be grateful for pointers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marianne Bellotti: &lt;a href=&#34;https://isbnsearch.org/isbn/9781718501188&#34;&gt;&lt;em&gt;Kill It With Fire&lt;/em&gt;&lt;/a&gt; (2021)&lt;/li&gt;
&lt;li&gt;Sarah Drasner: &lt;a href=&#34;https://isbnsearch.org/isbn/9798986769318&#34;&gt;&lt;em&gt;Engineering Management for the Rest of Us&lt;/em&gt;&lt;/a&gt; (2022)&lt;/li&gt;
&lt;li&gt;Camille Fournier: &lt;a href=&#34;https://isbnsearch.org/isbn/9781491973899&#34;&gt;&lt;em&gt;The Manager&amp;rsquo;s Path&lt;/em&gt;&lt;/a&gt; (2017)&lt;/li&gt;
&lt;li&gt;Claire Hughes Johnson: &lt;a href=&#34;https://isbnsearch.org/isbn/9781953953216&#34;&gt;&lt;em&gt;Scaling People&lt;/em&gt;&lt;/a&gt; (2023)&lt;/li&gt;
&lt;li&gt;Cate Huston: &lt;a href=&#34;https://isbnsearch.org/isbn/9781098154066&#34;&gt;&lt;em&gt;The Engineering Leader&lt;/em&gt;&lt;/a&gt; (2024)&lt;/li&gt;
&lt;li&gt;Will Larson: &lt;a href=&#34;https://isbnsearch.org/isbn/9781732265189&#34;&gt;&lt;em&gt;An Elegant Puzzle&lt;/em&gt;&lt;/a&gt; (2019)&lt;/li&gt;
&lt;li&gt;Will Larson: &lt;a href=&#34;https://isbnsearch.org/isbn/9781736417911&#34;&gt;&lt;em&gt;Staff Engineer&lt;/em&gt;&lt;/a&gt; (2021)&lt;/li&gt;
&lt;li&gt;Edmond Lau: &lt;a href=&#34;https://isbnsearch.org/isbn/9780996128100&#34;&gt;&lt;em&gt;The Effective Engineer&lt;/em&gt;&lt;/a&gt; (2015)&lt;/li&gt;
&lt;li&gt;Gergely Orosz: &lt;a href=&#34;https://isbnsearch.org/isbn/9789083381824&#34;&gt;&lt;em&gt;The Software Engineer&amp;rsquo;s Guidebook&lt;/em&gt;&lt;/a&gt; (2023)&lt;/li&gt;
&lt;li&gt;Tanya Reilly: &lt;a href=&#34;https://isbnsearch.org/isbn/9781098118730&#34;&gt;&lt;em&gt;The Staff Engineer&amp;rsquo;s Path&lt;/em&gt;&lt;/a&gt; (2022)&lt;/li&gt;
&lt;li&gt;Matthew Skelton and Manuel Pais: &lt;a href=&#34;https://isbnsearch.org/isbn/9781942788812&#34;&gt;&lt;em&gt;Team Topologies&lt;/em&gt;&lt;/a&gt; (2019)&lt;/li&gt;
&lt;li&gt;James Stanier: &lt;a href=&#34;https://isbnsearch.org/isbn/9781680507249&#34;&gt;&lt;em&gt;Become an Effective Software Engineering Manager&lt;/em&gt;&lt;/a&gt; (2020)&lt;/li&gt;
&lt;li&gt;Andrew Swerdlow: &lt;a href=&#34;https://isbnsearch.org/isbn/9798988984917&#34;&gt;&lt;em&gt;Tech Leadership&lt;/em&gt;&lt;/a&gt; (2023)&lt;/li&gt;
&lt;li&gt;Merih Taze: &lt;a href=&#34;https://isbnsearch.org/isbn/9798985349900&#34;&gt;&lt;em&gt;Engineers Survival Guide&lt;/em&gt;&lt;/a&gt; (2021)&lt;/li&gt;
&lt;li&gt;Peter Wendorff: &lt;a href=&#34;https://isbnsearch.org/isbn/9781484273791&#34;&gt;&lt;em&gt;Politics in Software Development&lt;/em&gt;&lt;/a&gt; (2022)&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Never Look Back</title>
   <link href="https://third-bit.com/2024/12/01/never-look-back/"/>
   <updated>2024-12-01T00:00:00Z</updated>
   <id>https://third-bit.com/2024/12/01/never-look-back/</id>
   <content type="html">&lt;p&gt;I gave a keynote at &lt;a href=&#34;http://cusec.net/&#34;&gt;CUSEC&lt;/a&gt; in 2010 about evidence-based software engineering.
A recording was available on Vimeo for several years,
but it disappeared some time after 2016.
A few days ago,
though,
I got mail out of the blue from someone who had found a copy.
They shared it with me in case I wanted to post it somewhere,
so I downloaded it and watched it through,
and now I feel a little bit sad.
In increasing order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A lot of what I said was wrong,
    either because the claims I made were stronger than they should have been
    or because the science itself has turned out to be flawed.
    (Stereotype threat, anyone?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was rude to a couple of people in order to get laughs from the audience.
    I don&amp;rsquo;t expect any of them will read this,
    but if they do,
    I&amp;rsquo;m sorry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really did believe things would get better.
    They haven&amp;rsquo;t:
    students don&amp;rsquo;t learn any more about research practices or empirical results in software engineering today
    than they did fifteen years ago,
    and programmers in industry are just as oblivious as they ever were.
    I really did think that &lt;a href=&#34;https://www.oreilly.com/library/view/making-software/9780596808310/&#34;&gt;&lt;em&gt;Making Software&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.computer.org/csdl/magazine/so/2024/03/10424425/1Ulj1Qa8tJ6&#34;&gt;It Will Never Work in Theory&lt;/a&gt;
    would have an impact on more than a few scattered individuals;
    I&amp;rsquo;m disappointed that they didn&amp;rsquo;t.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll post the video in a few days,
but I honestly found parts of it hard to watch.
I&amp;rsquo;ll be speaking at CUSEC again in January;
here&amp;rsquo;s hoping that talk holds up better.&lt;/p&gt;
&lt;p&gt;Time to make another cup of tea.
If you came in peace, be welcome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>More Student Project Proposals</title>
   <link href="https://third-bit.com/2024/12/01/more-student-project-proposals/"/>
   <updated>2024-12-01T00:00:00Z</updated>
   <id>https://third-bit.com/2024/12/01/more-student-project-proposals/</id>
   <content type="html">&lt;p&gt;Six weeks ago I posted some &lt;a href=&#34;https://third-bit.com/2024/10/18/student-project-proposals/&#34;&gt;undergraduate software projects&lt;/a&gt;
that I would be excited about supervising.  Two of those—Browsercast
and the Marimo plugins—have been picked up by students at the
University of Toronto.  The other three are still available, and I&amp;rsquo;ve
added a couple of others (see below). If you&amp;rsquo;re a senior looking for
a capstone project or a professor looking for projects with a
supervisor, please &lt;a href=&#34;mailto:gvwilson@third-bit.com&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Dragnet&lt;/h2&gt;
&lt;p&gt;One type of exercise that H5P &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; support is adding labels to
diagrams. &lt;a href=&#34;https://iezer.github.io/dragnet/&#34;&gt;This prototype&lt;/a&gt; takes an SVG with some
specially-marked labels, moves those labels to the side, and then lets
the user try to drag them back into the right places.  A deployable
version would need to do a lot more, such as dealing with scaling
transformations; the goal of this project is to turn the demo into
something a classroom teacher could use.&lt;/p&gt;
&lt;h2&gt;Tutorial Simulations of Distributed Systems&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example in Python&lt;/em&gt;&lt;/a&gt; deliberately ignored
concurrency, partial failure, and everything else associated with
modern distributed applications. The aim of this project is to (start
to) fix that by building scale models of distributed protocols and
systems from TCP to BitTorrent and load-balancing tools using either
&lt;a href=&#34;https://pydes.readthedocs.io/&#34;&gt;Py-DES&lt;/a&gt; or &lt;a href=&#34;https://simpy.readthedocs.io/&#34;&gt;SimPy&lt;/a&gt;. The tutorials will use simulators
so that the accompanying lessons could illustrate edge cases in
reproducible ways.&lt;/p&gt;
&lt;h2&gt;Software Design by Example in Gleam&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gleam.run/&#34;&gt;Gleam&lt;/a&gt; is a modern functional language that runs on the
&lt;a href=&#34;https://www.erlang.org/&#34;&gt;Erlang/OTP&lt;/a&gt; platform (and can also be compiled to
JavaScript). The aim of this project is to translate examples from
&lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example in Python&lt;/em&gt;&lt;/a&gt; into Gleam to help
people coming from Python and other mainstream languages understand
how to use FP in practice.&lt;/p&gt;
&lt;h2&gt;Parallelizing Marimo Notebooks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://marimo.io/&#34;&gt;Marimo&lt;/a&gt; is a next-generation computational notebook that (a)
stores everything as Python source code and (b) analyzes code to
prevent out-of-order execution of cells. &lt;a href=&#34;https://dagster.io/&#34;&gt;Dagster&lt;/a&gt; and
&lt;a href=&#34;https://metaflow.org/&#34;&gt;Metaflow&lt;/a&gt; are computational workflow tools that allow users
to add decorators to functions and methods to specify computational
chunks. The goal of this project is to see if the two can be married,
i.e., to see if it&amp;rsquo;s possible to add decorators to cell functions in
Marimo to parallelize notebooks directly.&lt;/p&gt;
&lt;h2&gt;Extending Lox&lt;/h2&gt;
&lt;p&gt;Lox is a simple interpreted language created by Robert Nystrom for his
(excellent) book &lt;a href=&#34;https://craftinginterpreters.com/&#34;&gt;&lt;em&gt;Crafting Interpreters&lt;/em&gt;&lt;/a&gt;. Many people have
extended it in various ways; in this project, students would re-create
Lox by working through the second half of Nystrom&amp;rsquo;s book, then add
operator overloading, cooperative concurrency, and a few other features
to bring the language up to par with &lt;a href=&#34;https://www.lua.org/&#34;&gt;Lua&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Automatic Identification of Variable Roles&lt;/h2&gt;
&lt;p&gt;Sajaniemi et al&amp;rsquo;s work on &lt;a href=&#34;https://www.ppig.org/files/2005-PPIG-17th-sajaniemi.pdf&#34;&gt;roles of variables&lt;/a&gt; identified and
named ten small patterns in the way variables are used in novice
programs. This project would build static and dynamic analysis tools
to detect those patterns (and possibly others) in programs as an aid
to teaching, debugging, and code review.&lt;/p&gt;
&lt;h2&gt;Entity-Relationship Diagrams for Dataframes&lt;/h2&gt;
&lt;p&gt;Entity-relation (ER) diagrams are one of the few graphical notations
that programmers actually use voluntarily.  This project would use
static and dynamic analysis to extract ER diagrams from programs that
use dataframe libraries like &lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;Pandas&lt;/a&gt; and &lt;a href=&#34;https://pola.rs/&#34;&gt;Polars&lt;/a&gt; to
show how dataframes are being combined, e.g., to infer foreign key
relationships.&lt;/p&gt;
&lt;h2&gt;The Impact of Calibrated Peer Review&lt;/h2&gt;
&lt;p&gt;Give a novice programmer a one-page program and have them score it
using a checklist, then grade them on how closely their scoring
matches the instructor’s. (They start with 100%, and lose one mark for
each false positive or false negative.) After doing this a handful of
times, they should learn to see code through the instructor’s
eyes. Does this help them write better code? If so, how quickly and
how well?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Another Static Site Generator for Lessons</title>
   <link href="https://third-bit.com/2024/11/30/another-ssg-for-lessons/"/>
   <updated>2024-11-30T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/30/another-ssg-for-lessons/</id>
   <content type="html">&lt;p&gt;I built a very simple static site generator (SSG) called &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt;
to support the lessons I mentioned in &lt;a href=&#34;https://third-bit.com/2024/11/24/unfinished-projects/&#34;&gt;my previous post&lt;/a&gt;.
I could have stuck with &lt;a href=&#34;https://www.dmulholl.com/docs/ark/main/&#34;&gt;Ark&lt;/a&gt;
(which I use to build this site and books like &lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design in Python&lt;/em&gt;&lt;/a&gt;),
but writing my own helped me figure out what I actually need,
and might someday serve as the basis for a tutorial of some sort.
In no particular order, &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt;&amp;rsquo;s features are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read configuration from the project&amp;rsquo;s &lt;code&gt;pyproject.toml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Convert all the Markdown files in or below the project&amp;rsquo;s root directory to HTML
    using &lt;a href=&#34;https://jinja.palletsprojects.com/&#34;&gt;Jinja&lt;/a&gt; templates.&lt;/li&gt;
&lt;li&gt;Rename a few files along the way:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt; becomes &lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt; becomes &lt;code&gt;code_of_conduct.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt; becomes &lt;code&gt;contributing.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE.md&lt;/code&gt; becomes &lt;code&gt;license.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create an HTML page corresponding to every source code file
    so that (for example) &lt;code&gt;a/b.py&lt;/code&gt; is visible online as &lt;code&gt;a/b.py.html&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;https://third-bit.com&lt;/code&gt; at the start of URLs with the relative path to the site&amp;rsquo;s root directory.&lt;/li&gt;
&lt;li&gt;Replace links to Markdown files with links to the corresponding HTML files.
    I do this so that links would work properly when people view the Markdown files on GitHub.&lt;/li&gt;
&lt;li&gt;Rewrite the URL in something like &lt;code&gt;[label](b:key)&lt;/code&gt; to &lt;code&gt;[label](https://third-bit.com/bibliography.html#key)&lt;/code&gt;
    to make it easy for authors to link to bibliographic citations.
    These special links &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; work when files are viewed on GitHub,
    but it&amp;rsquo;s a lot less typing that the alternative.
    (I use the &lt;a href=&#34;https://github.com/dmulholl/shortcodes&#34;&gt;shortcodes&lt;/a&gt; package to do this with &lt;a href=&#34;https://www.dmulholl.com/docs/ark/main/&#34;&gt;Ark&lt;/a&gt; sites,
    but after a bit of experimentation I decided to special-case these links in &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Similarly,
    &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; rewrites &lt;code&gt;[term](g:key)&lt;/code&gt; to &lt;code&gt;[term](https://third-bit.com/glossary.html#key)&lt;/code&gt;
    so that authors can easily insert glossary references.&lt;/li&gt;
&lt;li&gt;If a page contains any glossary references,
    &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; creates a list of defined terms at the top of the page.
    (In my experience,
    this is the most useful way to tell a would-be instructor what the lesson is actually about.)&lt;/li&gt;
&lt;li&gt;I tried using shortcodes to format figures consistently,
    but once I decided not to use them for the glossary and bibliography,
    it didn&amp;rsquo;t seem worth keeping them for figures.
    Instead,
    I check their properties during linting (see below).&lt;/li&gt;
&lt;li&gt;My tutorials focus on programming,
    so I need to be able to include snippets of source code in pages.
    &amp;ldquo;Snippets&amp;rdquo; makes the problem more complex:
    I often want to include just one function or a couple of methods rather than an entire source file.
    My previous SSG had a couple of hundred lines of code
    to pull sections out of source files in various ways;
    &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; just checks that the text in the Markdown file
    is contained in the source file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; defines a class for each inclusion like &lt;code&gt;language-py&lt;/code&gt; or &lt;code&gt;language-sql&lt;/code&gt;
    so that inclusions from different languages can be styled differently.
    I haven&amp;rsquo;t included syntax highlighting,
    partly because I want to keep this SSG simple
    but also because the highlighting rules I choose probably &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; match what learners see
    in their editor or IDE.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; includes a tool for linting sites,
    i.e.,
    for checking that links resolve,
    glossary entries are mentioned somewhere,
    and so on.
    It turned out to be a lot simpler to check for problems
    than to generate correct content automatically,
    at least for small lessons.
    &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; also uses &lt;a href=&#34;https://pypi.org/project/html5validator/&#34;&gt;html5validator&lt;/a&gt;
    to check the formatting of the HTML pages it generates;
    specific lessons use tools like &lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;ruff&lt;/a&gt; to check source code as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; &lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; include that a full-featured lesson SSG would?
The most important thing is probably some sort of support for exercises:
styling them,
numbering them,
keeping track of solutions,
and so on.
I could also add CSS styling for various kinds of callouts,
but I&amp;rsquo;m not trying to reproduce something like &lt;a href=&#34;https://carpentries.github.io/workbench/&#34;&gt;the Carpentries Workbench&lt;/a&gt;:
&lt;a href=&#34;https://github.com/lessonomicon/mccole&#34;&gt;McCole&lt;/a&gt; is a multi-bit screwdriver,
not a fully-equipped machine shop.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Unfinished Projects</title>
   <link href="https://third-bit.com/2024/11/24/unfinished-projects/"/>
   <updated>2024-11-24T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/24/unfinished-projects/</id>
   <content type="html">&lt;p&gt;Things I haven&amp;rsquo;t finished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://lessonomicon.github.io/querynomicon/&#34;&gt;tutorial on SQL&lt;/a&gt; for data scientists&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://lessonomicon.github.io/sudonomicon/&#34;&gt;tutorial on systems programming&lt;/a&gt; for data scientists&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://lessonomicon.github.io/webonomicon/&#34;&gt;tutorial on web programming&lt;/a&gt; for data scientists&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://gvwilson.github.io/doris/&#34;&gt;tutorial on building a dashboard engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://lessonomicon.github.io/mccole/&#34;&gt;very simple static site generator&lt;/a&gt; for the projects listed above&lt;/li&gt;
&lt;li&gt;Another volume of &lt;a href=&#34;https://aosabook.org/&#34;&gt;&lt;em&gt;The Architecure of Open Source Applications&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another 15 examples focused on concurrency for &lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gvwilson.github.io/rsdx/&#34;&gt;&lt;em&gt;Research Software Design by Example&lt;/em&gt;&lt;/a&gt; (a follow-on to &lt;a href=&#34;https://software-carpentry.org/&#34;&gt;Software Carpentry&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://lessonomicon.github.io/snailz/&#34;&gt;synthetic data generator&lt;/a&gt; for the project above&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/mrsp/&#34;&gt;&lt;em&gt;Managing Research Software Projects&lt;/em&gt;&lt;/a&gt; (another follow-on to &lt;a href=&#34;https://software-carpentry.org/&#34;&gt;Software Carpentry&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/btt/&#34;&gt;&lt;em&gt;Building Tech Together&lt;/em&gt;&lt;/a&gt; (advice for students doing their first team project)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Data Science for Software Engineers&lt;/em&gt; (which doesn&amp;rsquo;t currently have an online home)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/roc-lang/book-of-examples&#34;&gt;&lt;em&gt;Software Design by Example in Roc&lt;/em&gt;&lt;/a&gt; (to explore functional programming)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/fiction/beneath-coriandel/&#34;&gt;&lt;em&gt;Beneath Coriandel&lt;/em&gt;&lt;/a&gt; (an adult fantasy novel told from multiple viewpoints)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/fiction/booksters-apprentice/&#34;&gt;&lt;em&gt;The Bookster&amp;rsquo;s Apprentice&lt;/em&gt;&lt;/a&gt; (a YA novel set in the same world)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/fiction/still-book/&#34;&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/a&gt; (a YA novelette based on &lt;a href=&#34;https://third-bit.com/fiction/still-short/&#34;&gt;this short story&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/fiction/madica/&#34;&gt;&lt;em&gt;Madica&lt;/em&gt;&lt;/a&gt; (a middle-grade story about fairies, ninja cats, and robot dinosaurs)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://third-bit.com/fiction/maddy-roo/&#34;&gt;&lt;em&gt;Maddy Roo&lt;/em&gt;&lt;/a&gt; (a middle-grade story about furries and robots)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Iffy&lt;/em&gt; (a YA novel about a girl growing up in a post-Melt Antarctica)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;All the Other Santas&lt;/em&gt; (featuring RoboSanta, Clausbeard the Pirate, Zombie Claus, and others)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I should be working on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Re-doing the slides for &lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;SDXPY&lt;/em&gt;&lt;/a&gt; and recording a 30-minute video for each chapter&lt;/li&gt;
&lt;li&gt;Trying to get &lt;a href=&#34;https://third-bit.com/fiction/beneath-coriandel/&#34;&gt;&lt;em&gt;Beneath Coriandel&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://third-bit.com/fiction/booksters-apprentice/&#34;&gt;&lt;em&gt;The Bookster&amp;rsquo;s Apprentice&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&#34;https://third-bit.com/fiction/still-book/&#34;&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/a&gt; published&lt;/li&gt;
&lt;li&gt;Finishing &lt;em&gt;Iffy&lt;/em&gt;, &lt;em&gt;All the Other Santas&lt;/em&gt;, or the sequel to &lt;em&gt;Maddy Roo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Trying (again) to write &lt;a href=&#34;https://third-bit.com/ideas/sdgc/&#34;&gt;&lt;em&gt;Sex and Drugs and Guns and Code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I&amp;rsquo;ve learned about myself:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I have lots of ideas, most of which don&amp;rsquo;t make as much sense to other people as they do to me.&lt;/li&gt;
&lt;li&gt;I start things before I&amp;rsquo;ve thought them through.&lt;/li&gt;
&lt;li&gt;I have trouble finishing things (largely because of #2).&lt;/li&gt;
&lt;li&gt;I enjoy tinkering with small pieces of software much more than I enjoy contributing to large ones.&lt;/li&gt;
&lt;li&gt;I enjoy teaching and mentoring more than I enjoy managing.&lt;/li&gt;
&lt;li&gt;I run out of steam when I&amp;rsquo;m working on my own or don&amp;rsquo;t have a specific audience and deadline.&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>Project Students</title>
   <link href="https://third-bit.com/2024/11/21/project-students/"/>
   <updated>2024-11-21T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/21/project-students/</id>
   <content type="html">&lt;p&gt;I will be supervising some undergraduate projects at the University of Toronto next semester
for the first time in 15 years.
The map below shows the birthplaces (where I know them) of
the 146 students I supervised or co-supervised between 2002 and 2010;
I&amp;rsquo;m looking forward to adding another few points.&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;img src=&#34;https://third-bit.com/files/2024/csc49x.png&#34; alt=&#34;map of student birthplaces&#34;/&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Milner on Invention</title>
   <link href="https://third-bit.com/2024/11/18/milner-on-invention/"/>
   <updated>2024-11-18T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/18/milner-on-invention/</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;When I was a PhD student, I attended a talk by the late Robin Milner where he said two things that have stuck with me.
The first, I repeat quite often.
He argued that credit for an invention did not belong to the first person to invent something
but to the first person to explain it well enough that no one needed to invent it again.
His first historical example was Leibniz publishing calculus and then Newton claiming he invented it first:
it didn&amp;rsquo;t matter if he did or not,
he failed to explain it to anyone and so the fact that Leibniz needed to independently invent it was Newton&amp;rsquo;s failure.&lt;/p&gt;
&lt;p&gt;— &lt;a href=&#34;https://mastodon.social/@david_chisnall@infosec.exchange/113503287934765521&#34;&gt;David Chisnall&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>What Worked Last Time?</title>
   <link href="https://third-bit.com/2024/11/10/what-worked-last-time/"/>
   <updated>2024-11-10T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/10/what-worked-last-time/</id>
   <content type="html">&lt;p&gt;&lt;em&gt;I&amp;rsquo;m going to ask a favor, but I need to tell a story first.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Back in 2017,
in the wake of Trump&amp;rsquo;s first inauguration and the Muslim travel ban,
I tried to get a bunch of people to write a chapter each for
&lt;a href=&#34;https://third-bit.com/ideas/sdgc/&#34;&gt;a book&lt;/a&gt; that would explain basic ideas in politics, economics, and justice to programmers.
The model had succeeded before:
&lt;a href=&#34;https://www.oreilly.com/library/view/beautiful-code/9780596510046/&#34;&gt;&lt;em&gt;Beautiful Code&lt;/em&gt;&lt;/a&gt;,
&lt;a href=&#34;https://www.oreilly.com/library/view/making-software/9780596808310/&#34;&gt;&lt;em&gt;Making Software&lt;/em&gt;&lt;/a&gt;,
and &lt;a href=&#34;https://aosabook.org/&#34;&gt;&lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/a&gt;
were all widely read,
so I thought something that covered regulatory capture,
how it is that &amp;ldquo;intellectual&amp;rdquo; became &amp;ldquo;property&amp;rdquo;,
why people routinely vote against their own interests,
and so on would find an audience.&lt;/p&gt;
&lt;p&gt;The project never really got off the ground.
The programmers who volunteered to help didn&amp;rsquo;t really know the subjects themselves
(though a couple of them tried valiantly to learn as much as they could in a hurry).
As for the social scientists I approached,
they were either too busy with their own projects,
(quite reasonably) wanted to be paid,
or simply didn&amp;rsquo;t know how to talk to people in tech
with essentially no background in the humanities.
Their idea of &amp;ldquo;basic&amp;rdquo; was what they would teach in freshman college course;
unfortunately,
most programmers are at a tenth-grade level
when it comes to understanding how society works.
In fact it&amp;rsquo;s worse than that:
most programmers (including me) know as little about politics and economics
as the average political science major knows about recursion,
but we &lt;em&gt;think&lt;/em&gt; we know a lot more.&lt;/p&gt;
&lt;p&gt;So here we are eight years later.
I think it&amp;rsquo;s more important than ever
to offer an accessible, compelling alternative
to the self-serving libertarian brogrammer bullshit that is
Silicon Valley&amp;rsquo;s default setting,
but before I break my &amp;ldquo;no new projects&amp;rdquo; rule and try to get something off the ground,
I&amp;rsquo;d like to ask the favor I mentioned at the start of this post.
If you were part of something post-2016 that actually had an impact in tech,
I&amp;rsquo;d be very grateful if you could &lt;a href=&#34;mailto:gvwilson@third-bit.com&#34;&gt;let me know&lt;/a&gt;
what you did,
what it changed,
and how you know.
The Ford Foundation&amp;rsquo;s &lt;a href=&#34;https://www.fordfoundation.org/work/learning/learning-reflections/keeping-those-on-the-front-lines-of-change-safe-five-years-of-the-ford-foundation-grantee-safety-program/&#34;&gt;Grantee Safety Program&lt;/a&gt; is a great example:
thank you in advance for pointers to others.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Stained Glass</title>
   <link href="https://third-bit.com/2024/11/07/stained-glass/"/>
   <updated>2024-11-07T00:00:00Z</updated>
   <id>https://third-bit.com/2024/11/07/stained-glass/</id>
   <content type="html">&lt;p&gt;Many years ago,
a slightly inebriated graduate student told me that
stained glass windows have their roots in Gnosticism.
According to her,
some Gnostics believed that creating the universe was so great an effort
that it shattered God into pieces.
Each of us has one of those pieces—we call it a soul—and
our purpose in this world is to reassemble them to re-create the divine.
That&amp;rsquo;s what stained glass portrays:
fragments of something greater brought together to be made whole.
But no piece is completed by just one other;
instead,
each piece is only where it belongs when it&amp;rsquo;s joined with several others.&lt;/p&gt;
&lt;p&gt;Time to make another cup of tea.
If you came in peace, be welcome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What Would Be in a New AOSA?</title>
   <link href="https://third-bit.com/2024/10/28/what-would-be-in-a-new-aosa/"/>
   <updated>2024-10-28T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/28/what-would-be-in-a-new-aosa/</id>
   <content type="html">&lt;p&gt;My desktop background says &amp;ldquo;no new projects&amp;rdquo;
but that doesn&amp;rsquo;t mean I can&amp;rsquo;t dream.
It has been twelve years since we published the first two volumnes of
&lt;a href=&#34;https://aosabook.org/&#34;&gt;&lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/a&gt;:
if someone was going to put together a sequel with chapter-length descriptions of
the architectures of open source projects that have risen to prominence since then,
what would you want it to include?
Candidates so far include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://alpinejs.dev/&#34;&gt;Alpine.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt; and/or &lt;a href=&#34;https://www.videolan.org/&#34;&gt;VLC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dagster.io/&#34;&gt;dagster&lt;/a&gt; and/or &lt;a href=&#34;https://metaflow.org/&#34;&gt;Metaflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dash.plotly.com/&#34;&gt;Dash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deno.com/&#34;&gt;deno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.discourse.org/&#34;&gt;Discourse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://duckdb.org/&#34;&gt;duckdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dvc.org/&#34;&gt;DVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flask.palletsprojects.com/&#34;&gt;Flask&lt;/a&gt; and/or &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gleam.run/&#34;&gt;Gleam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haiku-os.org/&#34;&gt;Haiku&lt;/a&gt; and/or &lt;a href=&#34;https://serenityos.org/&#34;&gt;SerenityOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://immich.app/&#34;&gt;Immich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jellyfin.org/&#34;&gt;Jellyfin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joinmastodon.org/&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nushell.sh/&#34;&gt;Nushell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plausible.io/&#34;&gt;Plausible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pola.rs/&#34;&gt;Polars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt; and/or &lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;ruff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tauri.app/&#34;&gt;Tauri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte.&lt;/a&gt; and/or &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two things stand out for me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s a definite bias toward Python in this list,
    and a lamentable lack of distributed/fault-tolerant projects.
    Both are reflections of my biases and those of my acquaintances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think this would be a great collection,
    but I&amp;rsquo;m just as interested in a book on
    the architecture of open source &lt;em&gt;organizations&lt;/em&gt;.
    People talk about &amp;ldquo;the&amp;rdquo; open source community,
    but in practice we are hundreds or thousands of intersecting collections of people
    who have evolved many different ways to organize ourselves.
    I would love to read a collection of case studies of those different models,
    including commercial ones.
    (Full disclore:
    my &lt;a href=&#34;https://plotly.com/&#34;&gt;current employer&lt;/a&gt; is an open-core company.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;ll ever put either book together,
but as with the original volumes,
I think that assembling this would be a &lt;em&gt;great&lt;/em&gt; project
for a graduate class in software architecture.
If you&amp;rsquo;re interested,
please &lt;a href=&#34;mailto:gvwilson@third-bit.com&#34;&gt;reach out&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Wish List</title>
   <link href="https://third-bit.com/2024/10/20/wish-list/"/>
   <updated>2024-10-20T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/20/wish-list/</id>
   <content type="html">&lt;p&gt;Earlier this year I wrote &lt;a href=&#34;https://third-bit.com/2024/02/25/my-last-to-dont-list/&#34;&gt;my last to-don&amp;rsquo;t list&lt;/a&gt;.
As the leaves turn and the days get shorter,
here&amp;rsquo;s a list of things I hope I &lt;em&gt;will&lt;/em&gt; get to do.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dive the &lt;a href=&#34;https://en.wikipedia.org/wiki/Great_Blue_Hole&#34;&gt;Great Blue Hole&lt;/a&gt; in Belize with my wife.
    We both love diving,
    but we&amp;rsquo;ve never done it together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visit &lt;a href=&#34;https://bcparks.ca/cape-scott-park/&#34;&gt;Cape Scott National Park&lt;/a&gt; with my family.
    I grew up on Vancouver Island but have never been further north than Alert Bay;
    we were planning to go a couple of years ago
    but spent the week in bed with COVID instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revisit Japan, also with my family.
    I had a week in Kyoto back in 1993,
    but I spent most of it in a basement,
    and I&amp;rsquo;ve always regretted that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spend a year or two programming with and for young scientists.
    It would be nice if something from this turned into an open source package
    that other people picked up,
    but that would be a bonus;
    what I want most is just to feel useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publish some books for young readers.
    I&amp;rsquo;ve been working on several for years;
    I&amp;rsquo;ll be disappointed if I&amp;rsquo;m remaindered before any of them are on the shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Play Semisonic&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=xGytDsqkQY8&#34;&gt;&lt;em&gt;Closing Time&lt;/em&gt;&lt;/a&gt; on stage in a band,
    mostly for the practice sessions beforehand—I miss jamming with friends.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eat a meal at a fancy restaurant that was prepared by my daughter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Celebrate my fortieth wedding anniversary.
    I&amp;rsquo;d like to see my fiftieth,
    but I&amp;rsquo;m trying to be realistic…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bring my wife tea in the morning every day until that anniversary
    and for many years afterward.
    (I&amp;rsquo;d like to bring tea to my daughter every day as well,
    but I expect she&amp;rsquo;ll want to move out at some point.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave this world believing that it&amp;rsquo;s going to be OK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Student Project Proposals</title>
   <link href="https://third-bit.com/2024/10/18/student-project-proposals/"/>
   <updated>2024-10-18T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/18/student-project-proposals/</id>
   <content type="html">&lt;p&gt;My laptop screensaver says &amp;ldquo;no new projects&amp;rdquo; but I&amp;rsquo;d make an exception
to supervise a team of 2-4 undergraduates who wanted to tackle one of
the challenges described below. If you are teaching an undergraduate
capstone course and might be interested, please reach out.&lt;/p&gt;
&lt;h2&gt;Browsercast&lt;/h2&gt;
&lt;p&gt;Tools like PowerPoint aren&amp;rsquo;t web-friendly.  When you export a
slideshow to present on the web, what you actually get is a bunch of
images.  There&amp;rsquo;s no text, just pixels arranged in the shapes of
letters; no hyperlinks; and nothing search engines or disability aids
can read.  What&amp;rsquo;s worse, if you want something people can replay, you
have to make a screencast, which are just as opaque to search engines
and disability aids and probably several times larger than the
original slides.&lt;/p&gt;
&lt;p&gt;Browsercast is our solution to this problem.  It plays snippets of
audio in your browser as you move through your slides.  &amp;ldquo;View Source&amp;rdquo;,
links, CSS, screen readers, and search work as they should because
it&amp;rsquo;s all still web-native HTML.  And since it&amp;rsquo;s just text and audio,
it&amp;rsquo;s a fraction of the size of a video, which makes it ideal for
mobile devices.&lt;/p&gt;
&lt;p&gt;Our prototype uses just 5kb of JavaScript and is available under the
MIT License. There are many open questions; we are looking for a team
of 2-4 students with strong JavaScript skills and an interest in user
experience design to explore ways we can make it better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gvwilson/browsercast&#34;&gt;Browsercast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Marimo and H5P&lt;/h2&gt;
&lt;p&gt;Marimo is a next-generation computational notebook that enables data
scientists to mix code, discussion, and results in a reproducible way.
Its plugin system relies on AnyWidget, which specifies a simple
contract between extensions and Marimo&amp;rsquo;s rendering and execution
engine.&lt;/p&gt;
&lt;p&gt;The aim of this project is to design, build, and test a set of Marimo
plugins that can be used for classroom exercises similar to those in
the H5P toolkit: multiple choice, fill in the blanks, and so on. We
are looking for a team of 2-4 students with both JavaScript and Python
skills who have an interest in both user experience design and
teaching.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marimo.io/&#34;&gt;Marimo Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://anywidget.dev/&#34;&gt;AnyWidget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://h5p.org/content-types-and-applications&#34;&gt;H5P Content Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dragnet&lt;/h2&gt;
&lt;p&gt;One type of exercise that H5P &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; support is adding labels to
diagrams. &lt;a href=&#34;https://iezer.github.io/dragnet/&#34;&gt;This prototype&lt;/a&gt; takes an SVG with some
specially-marked labels, moves those labels to the side, and then lets
the user try to drag them back into the right places.  A deployable
version would need to do a lot more, such as dealing with scaling
transformations; the goal of this project is to turn the demo into
something a classroom teacher could use.&lt;/p&gt;
&lt;h2&gt;A Tutorial Simulation of Network Protocols&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example in Python&lt;/em&gt;&lt;/a&gt; deliberately ignored
concurrency, partial failure, and everything else associated with
modern distributed applications. The aim of this project is to (start
to) fix that by building scale models of real network protocols such
as TCP and the BitTorrent protocol using either &lt;a href=&#34;https://pydes.readthedocs.io/&#34;&gt;Py-DES&lt;/a&gt; or
&lt;a href=&#34;https://simpy.readthedocs.io/&#34;&gt;SimPy&lt;/a&gt;. The tutorials will use simulators so that the
accompanying lessons could illustrate edge cases in reproducible ways;
making the implementations work on a real network as well will be a
good stretch goal.&lt;/p&gt;
&lt;h2&gt;Software Design by Example in Gleam&lt;/h2&gt;
&lt;p&gt;For decades, functional programming (FP) has offered an alternative to
the imperative, procedural model used by most languages. As highly
concurrent systems have become the norm, FP&amp;rsquo;s promise of preventing
entire classes of bugs by avoiding mutable state has led a growing
number of programmers to re-examine it, but there is still often a
gulf between the kinds of examples language designers find
interesting and the kinds of things most working programmers build.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gleam.run/&#34;&gt;Gleam&lt;/a&gt; is a modern functional language that runs on the
&lt;a href=&#34;https://www.erlang.org/&#34;&gt;Erlang/OTP&lt;/a&gt; platform (and can also be compiled to
JavaScript). The aim of this project is to translate examples from
&lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example in Python&lt;/em&gt;&lt;/a&gt; into Gleam to help
people coming from Python and other mainstream languages understand
how to use FP in practice.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Case Studies in Open X</title>
   <link href="https://third-bit.com/2024/10/14/case-studies-in-open-x/"/>
   <updated>2024-10-14T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/14/case-studies-in-open-x/</id>
   <content type="html">&lt;p&gt;Over the weekend I read Kevin Young&amp;rsquo;s book
&lt;a href=&#34;https://abolishingfossilfuels.com/&#34;&gt;&lt;em&gt;Abolishing Fossil Fuels: Lessons from Movements That Won&lt;/em&gt;&lt;/a&gt;.
The first couple of chapters are an opinionated look at
the current state of fossil fuel politics in the United States;
the next few dive deep into four grassroots victories in US history
(the abolition of slavery, unionization, civil rights, and clean air).&lt;/p&gt;
&lt;p&gt;Young&amp;rsquo;s contention is that most popular and scholarly accounts of those victories misrepresent them.
In all four cases,
the people striving for change did not have the majority on their side
until well after they won,
and did not achieve their aims through the ballot box.
Instead,
they succeeded by bringing economic pressure to bear.
(Young quotes one abolitionist as writing,
&amp;ldquo;The quickest way to a white man&amp;rsquo;s conscience is through his pocketbook.&amp;rdquo;)
The lesson Young draws from this is that
present-day attempts to elect environmentally-minded politicians are unlikely to make a difference.
Instead,
decarbonization advocates&amp;rsquo; successes have come from targeting banks and businesses
in ways that make fossil fuels economically risky.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know enough of the history to judge Young&amp;rsquo;s arguments,
and I suspect 99% of readers won&amp;rsquo;t either.
(Union organizers of the 1930s are hardly household names.)
His version of history rings true, though,
and leaves me wishing for a book like this one
about the successes and failures of the open source, open science, and open data movements.
I don&amp;rsquo;t want polemics, advocacy, or how-to guides:
I&amp;rsquo;ve read (and written) enough of those.
What I want,
and what I think our movements are ready for,
is a set of critical, historically-informed case studies
that analyze how and why specific initiatives won or lost.
If anyone is working on something like this,
please let me know how I can help and thank you in advance&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Browsercast Revisited</title>
   <link href="https://third-bit.com/2024/10/12/browsercast-revisited/"/>
   <updated>2024-10-12T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/12/browsercast-revisited/</id>
   <content type="html">&lt;p&gt;Shakespeare wrote sonnets;
we write PowerPoint
A lot of people blame it for bad presentations,
but that&amp;rsquo;s like blaming fountain pens for bad poetry.
The real problem with tools like PowerPoint is that they aren&amp;rsquo;t web-friendly.
When you export a slideshow to present on the web,
what you actually get is a bunch of images.
There&amp;rsquo;s no text,
just pixels arranged in the shapes of letters;
no hyperlinks;
and nothing search engines or disability aids can read.
What&amp;rsquo;s worse,
if you want something people can replay,
you have to make a screencast.
These are just as opaque to search engines and disability aids,
and probably several times larger than the original slides.&lt;/p&gt;
&lt;p&gt;A decade ago,
we built a solution called Browsercast
that played audio in sync with an HTML slideshow.
&amp;ldquo;View Source&amp;rdquo;, links, CSS, screen readers, and search worked as they should
because everything was web-native HTML.
And since it was just text and audio,
it was a fraction of the size of a video,
which made it ideal for mobile devices.&lt;/p&gt;
&lt;p&gt;Browsercast never caught on,
but I&amp;rsquo;m hoping &lt;a href=&#34;https://gvwilson.github.io/browsercast/&#34;&gt;this new version&lt;/a&gt; will.
It&amp;rsquo;s just 5kb of JavaScript and 1.5kb of CSS,
and,
like its predecessor,
is available under the MIT License.
However,
there&amp;rsquo;s still a lot to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first challenge is to find a better way to manage replay.
    If the &lt;code&gt;audio&lt;/code&gt; element on the first slide doesn&amp;rsquo;t display controls,
    browsers refuse to play any of the sound clips
    because the user hasn&amp;rsquo;t interacted with the page.
    (Try removing &lt;code&gt;control=true&lt;/code&gt; from the first &lt;code&gt;audio&lt;/code&gt; element
    and then check the error messages in browser&amp;rsquo;s console log to confirm this.)
    This behavior prevents pop-up audio ads,
    but in this case it makes for a poor user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, we need a better way to manage the audio clips themselves.
    It&amp;rsquo;s easiest for a person to record their presentation as a single audio file,
    but the &lt;code&gt;audio&lt;/code&gt; elements in the slides would then need start and end time markers,
    which are annoying to find and copy into the browsercast file.
    On the other hand,
    splitting one file into a couple of dozens short clips
    or recording the presentation in a couple of dozen bursts
    is equally annoying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This prototype replays narration every time a slide comes into view,
    which means the audience hears a clip repeated
    when the presenter backs up to a previous slide.
    The JavaScript could keep track of which clips have already played
    and not replay them unless asked to,
    but should that be controlled by hot keys?
    Or should the audio control on the first slide be repeated on subsequent slides?
    Or should we approach this problem in some other way entirely?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://yihui.org/en/2023/09/snap-slides/&#34;&gt;snap-scroll technique&lt;/a&gt; for presenting slides
    does not behave gracefully when a slide is too tall to fit on the screen.
    We would like to clip slides to fit the viewport
    and to report clipped slides to authors as they are developing slideshows,
    but need ways to implement and present this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally [sic],
    we need to think about captioning and internationalization.
    Transcripts in different languages can easily be added to slides in hidden elements;
    how should the accompanying audio clips be added,
    and how should users indicate which set of clips they want to hear?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My thanks to David Seifried,
Jeremy Banks,
David Wolever,
Gabriel Ivanica,
and Rémi Emonet for their work on Version 1,
and to Yihui Xie for inventing the &lt;a href=&#34;https://yihui.org/en/2023/09/snap-slides/&#34;&gt;snap-scroll technique&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to Be Interviewed</title>
   <link href="https://third-bit.com/2024/10/11/how-to-be-interviewed/"/>
   <updated>2024-10-11T00:00:00Z</updated>
   <id>https://third-bit.com/2024/10/11/how-to-be-interviewed/</id>
   <content type="html">&lt;p&gt;Earlier this week
I gave a short presentation to some undergrads at the University of Toronto
on how to be interviewed for internships.
The points I made are listed below;
as always, I&amp;rsquo;d be grateful for feedback.&lt;/p&gt;
&lt;h2&gt;Why Should You Listen to Me?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Worked at six universities, a dozen companies, and a non-profit over 40 years&lt;/li&gt;
&lt;li&gt;Supervised over 20 undergraduate interns and hired that many again for other people&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why Shouldn&amp;rsquo;t You Listen to Me?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I graduated in a tech boom 40 years ago — you are facing the toughest job market I&amp;rsquo;ve ever seen&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re probably not a middle-aged straight white guy&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re probably not applying for the same jobs I would&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Pipeline (Fall 2024 Edition)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Step&lt;/th&gt;
&lt;th style=&#34;text-align: right;&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Ad online (days)&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Applications&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;1776&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;After first manual screen&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;289&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;After second manual screen&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;After HR screening call&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;After 1/2 hr with me&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;After coding interview&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Offers&lt;/td&gt;
&lt;td style=&#34;text-align: right;&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Before We Talk to You&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t meet the legal criteria, please don&amp;rsquo;t apply&lt;/li&gt;
&lt;li&gt;Page 1 is the only page that matters&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t waste space on &amp;ldquo;I&amp;rsquo;m a hard worker, quick to adapt, and a good team player&amp;rdquo;&lt;ul&gt;
&lt;li&gt;Because nobody says &amp;ldquo;I&amp;rsquo;m lazy, stubborn, and anti-social&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tell me your GPA&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ll wonder about it if you don&amp;rsquo;t&lt;/li&gt;
&lt;li&gt;But note that I prefer consistency (B-B-B-B) to inconsistency (A-C-A-D)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you say &amp;ldquo;42.3% improvement in customer retention&amp;rdquo;, I&amp;rsquo;ll ask for details…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;On &lt;strike&gt;the Phone&lt;/strike&gt; Zoom&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First screen is 15 minutes with HR&lt;ul&gt;
&lt;li&gt;If they find out you have misrepresented yourself, the conversation is over&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Second is 30 minutes with me&lt;/li&gt;
&lt;li&gt;Then a 50-minute coding interview&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;My Script&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introductions&lt;/li&gt;
&lt;li&gt;Icebreaker (2 min)&lt;ul&gt;
&lt;li&gt;What was your favorite course and why?&lt;/li&gt;
&lt;li&gt;What about your least favorite?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Walk me through the most complicated thing you&amp;rsquo;ve built (5-10 min)&lt;ul&gt;
&lt;li&gt;Tech stack&lt;/li&gt;
&lt;li&gt;Tech decisions you had to make and how you made them&lt;/li&gt;
&lt;li&gt;How did you know it actually worked?&lt;/li&gt;
&lt;li&gt;What would you do differently if you had to do it again?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design question (5-10 min)&lt;ul&gt;
&lt;li&gt;Initially present a simple problem with a straightforward solution&lt;/li&gt;
&lt;li&gt;Then add a wrinkle that might require a change to that solution&lt;/li&gt;
&lt;li&gt;Add another complication that definitely requires backing up and re-thinking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plotly (3-5 min)&lt;ul&gt;
&lt;li&gt;What we build&lt;/li&gt;
&lt;li&gt;How we&amp;rsquo;re organized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Positions and projects&lt;ul&gt;
&lt;li&gt;Four open positions (Jan-Aug 2025)&lt;/li&gt;
&lt;li&gt;Probably work on 2-3 projects in that time&lt;/li&gt;
&lt;li&gt;Probably just one team, but who knows?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Questions?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I&amp;rsquo;m Looking For&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can you explain technical details?&lt;ul&gt;
&lt;li&gt;If it&amp;rsquo;s on your resume, I&amp;rsquo;m allowed to drill down&lt;/li&gt;
&lt;li&gt;If you dodge, I&amp;rsquo;ll definitely drill down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you explain why you built something as you did?&lt;/li&gt;
&lt;li&gt;Can you think aloud / think with me?&lt;/li&gt;
&lt;li&gt;Do you have interesting questions?&lt;/li&gt;
&lt;li&gt;I.e., have you looked at my company&amp;rsquo;s website?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Coding Interview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Your CV tells me that you can write code&lt;/li&gt;
&lt;li&gt;But can you debug?&lt;ul&gt;
&lt;li&gt;A better indicator than LeetCode exercises&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We send a hundred-line program with some bugs and watch the candidate find them&lt;/li&gt;
&lt;li&gt;They are allowed to use web search, AI, etc.&lt;ul&gt;
&lt;li&gt;We want to see how they actually code&lt;/li&gt;
&lt;li&gt;But we have to be able to see everything they&amp;rsquo;re doing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What we&amp;rsquo;re looking for&lt;ul&gt;
&lt;li&gt;How methodical are they?&lt;/li&gt;
&lt;li&gt;How well do they use their tools?&lt;ul&gt;
&lt;li&gt;Prefer debugger to print() or console.log()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bonus marks if they create a test case without being prompted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do they ask for clarification when they need it?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How You Can Help Each Other&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read and critique each other&amp;rsquo;s CVs&lt;/li&gt;
&lt;li&gt;Practice Q&amp;amp;A with each other&lt;/li&gt;
&lt;li&gt;Learn to use your tools well&lt;/li&gt;
&lt;li&gt;Build a personal website&lt;ul&gt;
&lt;li&gt;GitHub Pages is fine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be kind&lt;ul&gt;
&lt;li&gt;You are not really each other&amp;rsquo;s competition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Improve Your Chances of Getting Re-hired&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn &lt;a href=&#34;https://www.youtube.com/watch?v=PtewOjRy-1U&#34;&gt;how to participate in a status meeting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Progress, plans, and problems go up&lt;/li&gt;
&lt;li&gt;Context and priorities come down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn how to review code software designs&lt;/li&gt;
&lt;li&gt;Learn how to estimate how long things will take&lt;ul&gt;
&lt;li&gt;Optimists are tiring…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn (about) the other 90% of the business&lt;ul&gt;
&lt;li&gt;Ask to have a coffee with DevOps, Product Management, Customer Success, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>First Draft of the Webonomicon</title>
   <link href="https://third-bit.com/2024/09/27/first-draft-of-webonomicon/"/>
   <updated>2024-09-27T00:00:00Z</updated>
   <id>https://third-bit.com/2024/09/27/first-draft-of-webonomicon/</id>
   <content type="html">&lt;p&gt;A few months ago I mused about what might go into a lesson on &lt;a href=&#34;https://third-bit.com/2024/06/14/human-scale-software/&#34;&gt;human-scale software&lt;/a&gt;.
&lt;a href=&#34;https://ikasten.io/&#34;&gt;Juanan Pereira&lt;/a&gt; and I have now sketched a rough outline,
tentatively titled &lt;a href=&#34;https://lessonomicon.github.io/webonomicon/&#34;&gt;The Webonomicon&lt;/a&gt;.
The sections below shows the learner persona,
the technologies we discuss,
and the order of topics,
while &lt;a href=&#34;https://github.com/lessonomicon/webonomicon&#34;&gt;the repository&lt;/a&gt; has working code.
There&amp;rsquo;s a lot left to do,
but we&amp;rsquo;d be grateful for feedback:
issues in &lt;a href=&#34;https://github.com/lessonomicon/webonomicon&#34;&gt;the repo&lt;/a&gt; are the best way to reach us.&lt;/p&gt;
&lt;h2&gt;Learner Persona&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sabina, 28, has a master&amp;rsquo;s degree in animal physiology
    and now works for a mid-sized veterinary pharmaceutical company.&lt;/li&gt;
&lt;li&gt;She learned a bit of R in an undergraduate biostatistics course,
    then picked up Python in grad school.
    She spends several hours a week analyzing data with [Pandas][pandas]
    and visualizing it with [Plotly Express][plotly-express],
    and is comfortable with basic Git commands.&lt;/li&gt;
&lt;li&gt;Sabina recently became responsible for maintaining a dashboard application built with [Dash][dash].
    She believes a better understanding of how web applications work in general
    will help her debug and extend it.&lt;/li&gt;
&lt;li&gt;Sabina has tried doing asynchronous online courses a couple of times,
    but strongly prefers learning in real time with other people.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technologies&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://alpinejs.dev/&#34;&gt;Alpine.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;dynamic HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://beautiful-soup-4.readthedocs.io/&#34;&gt;Beautiful Soup&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HTML manipulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://deno.com/&#34;&gt;deno&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.fastht.ml/&#34;&gt;FastHTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;web framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://flask.palletsprojects.com/&#34;&gt;Flask&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;web server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://frappe.io/charts/docs&#34;&gt;Frappe Charts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;charts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://pypi.org/project/html5validator/&#34;&gt;html5validator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;validation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;interaction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.python-httpx.org/&#34;&gt;httpx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://jinja.palletsprojects.com/&#34;&gt;Jinja2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HTML templating&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;&gt;JWT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;authentication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://pola.rs/&#34;&gt;Polars&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;tabular data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://pypi.org/project/prettytable/&#34;&gt;PrettyTable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;formatting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://pypika.readthedocs.io/&#34;&gt;PyPika&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;query builder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;testing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://pypi.org/project/selenium/&#34;&gt;Selenium&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;testing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/lessonomicon/snailz&#34;&gt;snailz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;synthetic data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://svgjs.dev/&#34;&gt;SVG.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;graphics&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Topics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Introduction: what we will learn, how to set up, and the data we will use&lt;/li&gt;
&lt;li&gt;HTTP: how browsers and server talk to each other&lt;/li&gt;
&lt;li&gt;A Server: building a server with &lt;a href=&#34;https://flask.palletsprojects.com/&#34;&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using a Database: getting data from &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; using &lt;a href=&#34;https://pypika.readthedocs.io/&#34;&gt;PyPika&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Testing the Server: testing the server with &lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Serving HTML: generating HTML with &lt;a href=&#34;https://jinja.palletsprojects.com/&#34;&gt;Jinja&lt;/a&gt; templates&lt;/li&gt;
&lt;li&gt;Using Forms: sending data to a server&lt;/li&gt;
&lt;li&gt;An Hour of JavaScript: variables, loops, functions, and callbacks&lt;/li&gt;
&lt;li&gt;JavaScript in the Browser: using the language in its native habitat&lt;/li&gt;
&lt;li&gt;Using HTMX: letting the &lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt; library do the hard work&lt;/li&gt;
&lt;li&gt;Database Migration: managing database schema changes&lt;/li&gt;
&lt;li&gt;Permissions: representing and checking who can do what&lt;/li&gt;
&lt;li&gt;Authentication: checking the user&amp;rsquo;s identity&lt;/li&gt;
&lt;li&gt;Encryption: keeping secrets safe&lt;/li&gt;
&lt;li&gt;Testing in the Browser: using &lt;a href=&#34;https://pypi.org/project/selenium/&#34;&gt;Selenium&lt;/a&gt; to test the user interface&lt;/li&gt;
&lt;li&gt;Dynamic Graphics: drawing pictures with &lt;a href=&#34;https://svgjs.dev/&#34;&gt;SVG.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Graphical User Interface: handling interactivity in the browser&lt;/li&gt;
&lt;li&gt;Accessibility: because everyone should be comfortable&lt;/li&gt;
&lt;li&gt;Internationalization: because everyone should be welcome&lt;/li&gt;
&lt;li&gt;Logging and Auditing: keeping of track of what&amp;rsquo;s happened&lt;/li&gt;
&lt;li&gt;Session: persistent sessions and &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;&gt;JWT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FastHTML: bringing it all together&lt;/li&gt;
&lt;li&gt;Designing a Workflow: thinking before coding&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>A Bag of Hippos</title>
   <link href="https://third-bit.com/2024/09/23/a-bag-of-hippos/"/>
   <updated>2024-09-23T00:00:00Z</updated>
   <id>https://third-bit.com/2024/09/23/a-bag-of-hippos/</id>
   <content type="html">&lt;p&gt;&lt;img class=&#34;centered&#34; src=&#34;https://third-bit.com/files/2024/pink-hippo.jpg&#34; alt=&#34;pink hippo&#34; width=&#34;25%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Back when I was teaching at the University of Toronto,
I used to give little pink hippos to my students as prizes:
I had purchased a bag of 200 for reasons that aren&amp;rsquo;t worth going into,
and this seemed like the best way to get rid of them.&lt;/p&gt;
&lt;p&gt;I had a couple or three dozen left by the time I left that job,
so I put them in a bag in my knapsack.
Whenever I saw a kid being unhappy on the streetcar I asked their adult if it was OK to offer them a hippo.
Sometimes the answer was &amp;ldquo;no&amp;rdquo;,
but more often it was &amp;ldquo;Sure, thank you, anything.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;One day—I think it was the summer of 2011 but I&amp;rsquo;m not sure—there was a boy of four or five
who was particularly unhappy
and whose mother looked like she was having a particularly stressful day.
I pulled out a hippo and said,
&amp;ldquo;Would this help?&amp;rdquo;
The kid&amp;rsquo;s eyes lit up and his mom said, &amp;ldquo;Sure, thank you.&amp;rdquo;
As he started playing with it on the seat she thanked me again and said,
&amp;ldquo;Of course, he&amp;rsquo;ll lose it as soon as I turn around.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;No problem,&amp;rdquo; I said,
and I handed her the bag with the remaining hippos
and got off the streetcar without looking back.&lt;/p&gt;
&lt;p&gt;Time to make another cup of tea.
If you came in peace, be welcome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Labels for Technical Writing Projects</title>
   <link href="https://third-bit.com/2024/09/12/writing-project-labels-revisited/"/>
   <updated>2024-09-12T00:00:00Z</updated>
   <id>https://third-bit.com/2024/09/12/writing-project-labels-revisited/</id>
   <content type="html">&lt;p&gt;&lt;em&gt;(Originally posted in the &lt;a href=&#34;https://ropensci.org/blog/2024/09/12/labels-writing-projects/&#34;&gt;rOpenSci blog&lt;/a&gt;—my thanks to &lt;a href=&#34;https://yabellini.netlify.app/&#34;&gt;Yanina Bellini Saibene&lt;/a&gt; for editing.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Over the past thirty years I have written five technical books,
co-written three others,
and edited a further six.
Since 2007 they have all lived in GitHub repositories,
as did the first versions of the &lt;a href=&#34;https://carpentries.org/&#34;&gt;Software Carpentry&lt;/a&gt; lessons that I helped to write.&lt;/p&gt;
&lt;p&gt;A few months ago I wrote about &lt;a href=&#34;https://third-bit.com/2024/03/07/labels/&#34;&gt;the GitHub issue labels I use&lt;/a&gt;
for writing projects like these.
As I put that post together,
I realized that I wasn&amp;rsquo;t actually using all of the labels I had created,
and that the problem of choosing good labels for a mixture of code and prose
is more complicated than it seems.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitHub only allows one set of labels per project,
    which means that the labels you would want to apply to issues
    are in the same pile as labels you&amp;rsquo;d want to apply to pull requests (PRs).
    This overlap quickly leads to confusion:
    &amp;ldquo;bug&amp;rdquo; is the right label for an issue reporting a problem,
    but doesn&amp;rsquo;t feel appropriate for the PR that fixes the problem.
    (&amp;ldquo;Wait, is this PR adding a bug?&amp;rdquo;)
    Most projects use two different labels (e.g., &amp;ldquo;bug&amp;rdquo; and &amp;ldquo;fix&amp;rdquo;),
    but after going back and forth,
    I&amp;rsquo;ve settled on &amp;ldquo;fix&amp;rdquo; to mean both &amp;ldquo;Please fix this&amp;rdquo; (in an issue)
    and &amp;ldquo;This contains a fix&amp;rdquo; (in a PR).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default,
    GitHub provides nine labels for issues and PRs.
    Fully a third of these—&lt;code&gt;duplicate&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, and &lt;code&gt;wontfix&lt;/code&gt;—describe reasons to close an issue
    or discard a PR.
    That seems excessive to me,
    and I feel it&amp;rsquo;s polite to add a sentence or two of explanation as a comment.
    (You have to do this anyway when marking an issue or PR as &lt;code&gt;duplicate&lt;/code&gt; to point at what it&amp;rsquo;s duplicating.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I find it a bit ironic that GitHub provides three ways to say &amp;ldquo;no&amp;rdquo; but none for saying &amp;ldquo;yes&amp;rdquo;.
If I was going to use labels to mark closed issues,
I would include &amp;ldquo;resolved&amp;rdquo; and/or &amp;ldquo;merged&amp;rdquo;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Also note: English doesn&amp;rsquo;t have an antonym for &amp;ldquo;mistake&amp;rdquo;, i.e., we don&amp;rsquo;t have a single word
that means, &amp;ldquo;A thing done well.&amp;rdquo;
We sometimes say &amp;ldquo;a score&amp;rdquo; or &amp;ldquo;a win&amp;rdquo; to mean this,
but those are the outcome, not the act itself.
I sometimes wonder what this absence says about English speakers&amp;rsquo; view of the world…&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you create a new project on GitHub,
    you can select any of several widely-used licenses.
    However,
    all of those licenses apply to code:
    the &lt;a href=&#34;https://creativecommons.org/&#34;&gt;Creative Commons&lt;/a&gt; licenses for prose (written work) aren&amp;rsquo;t offered.
    I always wind up writing &lt;a href=&#34;https://github.com/gvwilson/sql-tutorial/blob/main/LICENSE.md&#34;&gt;a custom &lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt; to say that
    all of the written material is made available under the CC-BY-NC-4.0 license
    while the software is made available under the MIT License.&lt;/p&gt;
&lt;p&gt;I mention this here because I find other things missing as well for writing projects.
One of GitHub&amp;rsquo;s default issue labels is &amp;ldquo;documentation&amp;rdquo;,
but I don&amp;rsquo;t think the prose in a lesson or chapter is documentation of code:
the code is there to support the writing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So here&amp;rsquo;s what I&amp;rsquo;m using in my current writing projects:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;(request for) new feature&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;change&lt;/td&gt;
&lt;td&gt;exists but could be better&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;in software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;discussion&lt;/td&gt;
&lt;td&gt;questions and conversations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fix&lt;/td&gt;
&lt;td&gt;something is broken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;good first issue&lt;/td&gt;
&lt;td&gt;good for newcomers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;governance&lt;/td&gt;
&lt;td&gt;meta-discussion of project management&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prose&lt;/td&gt;
&lt;td&gt;in written content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;task&lt;/td&gt;
&lt;td&gt;one-off task&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tooling&lt;/td&gt;
&lt;td&gt;infrastructure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In more detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, and &lt;code&gt;fix&lt;/code&gt; are meant to be mutually exclusive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; and &lt;code&gt;prose&lt;/code&gt; can be used together (e.g., a new lesson adds both)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discussion&lt;/code&gt; and &lt;code&gt;governance&lt;/code&gt; are for project management&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tooling&lt;/code&gt; is used for the build system, page templates, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;task&lt;/code&gt; is something that needs to be done once (e.g., &amp;ldquo;publish a release&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;good first issue&lt;/code&gt; is there because we want people to feel welcome&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;d enjoy hearing about what you&amp;rsquo;re using—please &lt;a href=&#34;mailto:gvwilson@third-bit.com&#34;&gt;email me&lt;/a&gt;
if you&amp;rsquo;d like to start a conversation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Later: someone mailed to ask why I use the &amp;ldquo;NC&amp;rdquo; (non-commercial) clause in my license.
The answer is that I don&amp;rsquo;t think it&amp;rsquo;s sustainable for companies to take lesson material that people have made public
and profit from it without compensating the authors of that material.
If you, as an academic, want to re-use my notes and slides, you are very welcome to do so;
if Elsevier wants to bundle them up in a book and charge students €60 for it,
I want to be able to say &amp;ldquo;no&amp;rdquo;,
or to say, &amp;ldquo;yes, but you have to give me some of that so that I can keep producing this material&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The NC clause is also part of my deal with my publisher (CRC Press):
they are OK with me putting an HTML version of &lt;a href=&#34;https://third-bit.com/sdxpy/&#34;&gt;&lt;em&gt;Software Design by Example&lt;/em&gt;&lt;/a&gt; and other books online
for people to read for free,
but would &lt;em&gt;not&lt;/em&gt; be OK with some other for-profit publisher taking that and republishing it without permission.
I think that&amp;rsquo;s a fair bargain:
people who can&amp;rsquo;t afford to buy the book can read it,
and the publisher can make money from the printed, PDF, and EPUB versions
as compensation for the effort they put into editing and publicizing the book.&lt;/p&gt;
&lt;p&gt;Later: a collaborator pointed out an interesting inconsistency.
I follow &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt; style in my Git commit messages,
so the title line of each commit starts with a single word like &amp;ldquo;fix&amp;rdquo;,
&amp;ldquo;feat&amp;rdquo; (short for &amp;ldquo;feature&amp;rdquo;),
or &amp;ldquo;publish&amp;rdquo; (when all I&amp;rsquo;m doing is rebuilding the HTML version of the lesson).
These words don&amp;rsquo;t line up with the labels I use for issues and PRs:
I don&amp;rsquo;t have a label for &amp;ldquo;publish&amp;rdquo;,
and I use &amp;ldquo;feat&amp;rdquo; instead of &amp;ldquo;add&amp;rdquo; for something new.
I&amp;rsquo;m embarrassed that I didn&amp;rsquo;t notice this before,
and now I need to think about what to do about it…&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
</feed>